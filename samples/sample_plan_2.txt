Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create
  ~ update in-place
  -/+ destroy and then create replacement

Terraform will perform the following actions:

  # module.database.aws_db_instance.postgres will be created
  + resource "aws_db_instance" "postgres" {
      + address                               = (known after apply)
      + allocated_storage                     = 20
      + allow_major_version_upgrade           = false
      + apply_immediately                     = false
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = (known after apply)
      + backup_retention_period               = 7
      + backup_window                         = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + character_set_name                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + db_name                               = "appdb"
      + db_subnet_group_name                  = (known after apply)
      + delete_automated_backups              = true
      + deletion_protection                   = false
      + domain                                = (known after apply)
      + domain_iam_role_name                  = (known after apply)
      + enabled_cloudwatch_logs_exports       = (known after apply)
      + endpoint                              = (known after apply)
      + engine                                = "postgres"
      + engine_version                        = "13.7"
      + engine_version_actual                 = (known after apply)
      + final_snapshot_identifier             = "postgres-final-snapshot-20240115"
      + hosted_zone_id                        = (known after apply)
      + id                                    = (known after apply)
      + identifier                            = "app-postgres-db"
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t3.micro"
      + iops                                  = (known after apply)
      + kms_key_id                            = (known after apply)
      + latest_restorable_time                = (known after apply)
      + license_model                         = (known after apply)
      + maintenance_window                    = (known after apply)
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + multi_az                              = false
      + name                                  = (known after apply)
      + nchar_character_set_name              = (known after apply)
      + network_type                          = (known after apply)
      + option_group_name                     = (known after apply)
      + parameter_group_name                  = (known after apply)
      + password                              = (sensitive value)
      + performance_insights_enabled          = false
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = (known after apply)
      + publicly_accessible                  = false
      + replica_mode                          = (known after apply)
      + replicas                              = (known after apply)
      + resource_id                           = (known after apply)
      + skip_final_snapshot                   = false
      + snapshot_identifier                   = (known after apply)
      + status                                = (known after apply)
      + storage_encrypted                     = true
      + storage_type                          = (known after apply)
      + storage_throughput                    = (known after apply)
      + tags                                  = {
          + "Environment" = "production"
          + "Service"     = "database"
        }
      + tags_all                              = {
          + "Environment" = "production"
          + "Service"     = "database"
        }
      + timezone                              = (known after apply)
      + username                              = "dbadmin"
      + vpc_security_group_ids                = (known after apply)
    }

  # aws_route53_record.api[0] will be replaced
  -/+ resource "aws_route53_record" "api" {
      ~ fqdn    = "api.example.com." -> (known after apply)
      ~ id      = "Z123456789_api.example.com_A" -> (known after apply)
        name    = "api.example.com"
      ~ records = [
          - "192.168.1.100",
          + "10.0.1.50",
        ]
      ~ zone_id = "Z123456789" -> "Z987654321" # forces replacement
        # (3 unchanged attributes hidden)
    }

  # module.vpc.aws_vpc.main will be updated in-place
  ~ resource "aws_vpc" "main" {
        id                                   = "vpc-0123456789abcdef0"
        # (14 unchanged attributes hidden)

      ~ tags     = {
          ~ "Name" = "main-vpc" -> "production-vpc"
            # (2 unchanged attributes hidden)
        }
      ~ tags_all = {
          ~ "Name" = "main-vpc" -> "production-vpc"
            # (2 unchanged attributes hidden)
        }
    }

  # aws_secretsmanager_secret.api_key will be updated in-place
  ~ resource "aws_secretsmanager_secret" "api_key" {
        id                     = "arn:aws:secretsmanager:us-west-2:123456789012:secret:api-key-AbCdEf"
        name                   = "api-key"
        # (9 unchanged attributes hidden)

      ~ tags     = {
          + "Environment" = "production"
            # (1 unchanged attribute hidden)
        }
      ~ tags_all = {
          + "Environment" = "production"
            # (1 unchanged attribute hidden)
        }
    }

Plan: 1 to add, 2 to change, 1 to destroy.